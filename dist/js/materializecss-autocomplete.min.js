/* materializecss-autocomplete - v1.0.5 - 2017-06-03 */
!function() {
    "use strict";
    angular.module("material.autocomplete", []);
}(), function() {
    "use strict";
    var a = function() {
        var a, b = document.querySelector("script[src$='materializecss-autocomplete.js']"), c = document.querySelector("script[src$='materializecss-autocomplete.min.js']");
        return b ? a = b.src : c && (a = c.src), {
            restrict: "E",
            scope: {},
            bindToController: {
                id: "@acId",
                inputName: "@acInputName",
                showInputName: "=?acShowInputName",
                placeHolder: "@?acPlaceHolder",
                selectedItem: "=acSelectedItem",
                searchText: "=?acSearchText",
                displayProperty1: "@acDisplayProperty1",
                displayProperty2: "@?acDisplayProperty2",
                displayProperty3: "@?acDisplayProperty3",
                displaySubProperty1: "@?acDisplaySubProperty1",
                displaySubProperty2: "@?acDisplaySubProperty2",
                displaySubProperty3: "@?acDisplaySubProperty3",
                displayColor: "@acDisplayColor",
                displayPicture: "@acDisplayPicture",
                uniqueDisplayProperty: "=?acUniqueDisplayProperty",
                itemList: "=?acItems",
                remoteMethod: "@?acRemoteMethod",
                itemChange: "&?acSelectedItemChange",
                disableInput: "=?acDisableInput",
                onBlurCb: "&?acOnBlurCb",
                onFocusCb: "&?acOnFocusCb",
                minlength: "=?acMinlength",
                required: "@?acRequired",
                selectionErrorMessage: "@?acSelectionErrorMessage",
                errorColor: "@?acErrorColor",
                successColor: "@?acSuccessColor",
                disableCrossIcon: "=?acDisableCrossIcon"
            },
            replace: !0,
            controller: "materialAutocompleteCntrl",
            controllerAs: "ac",
            templateUrl: a.substring(0, a.lastIndexOf("/", a.lastIndexOf("/") - 1)) + "/views/list.html"
        };
    };
    angular.module("material.autocomplete").directive("materialAutocomplete", [ a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c) {
        function d() {
            e(), f();
        }
        function e() {
            w.searchText = "";
        }
        function f() {
            w.element.input.blur(), w.element.input.value = null, k(), w.element.input.focus();
        }
        function g() {
            a.$watch(angular.bind(w, function() {
                return w.searchText;
            }), k), a.$watch(angular.bind(w, function() {
                return w.selectedItem;
            }), l);
        }
        function h() {
            return !i();
        }
        function i() {
            return !w.loading && (!j() && !!z);
        }
        function j() {
            return !!w.selectedItem;
        }
        function k(a, b) {
            w.index = -1, a !== b && (w.selectedItem && w.displayProperty1 ? (q(!1), w.selectedItem[w.displayProperty1] !== a && (w.selectedItem = null, 
            w.hidden = h())) : w.remoteMethod && r(a));
        }
        function l(a, b) {
            a ? w.displayProperty1 && (w.searchText = a[w.displayProperty1]) : b && w.searchText && b[w.displayProperty1] === w.searchText && (w.searchText = ""), 
            a !== b && m();
        }
        function m() {
            angular.isFunction(w.itemChange) && w.itemChange(w.selectedItem);
        }
        function n(a) {
            var b = {};
            for (var c in a) a.hasOwnProperty(c) && (b[c] = angular.element(a[c]));
            return b;
        }
        function o() {
            if (w.element.li[0]) {
                var a = w.element.li[0].offsetHeight, b = a * w.index, c = b + a, d = w.element.scroller.clientHeight, e = w.element.scroller.scrollTop;
                b < e ? p(b) : c > e + d && p(c - d);
            }
        }
        function p(a) {
            w.element.scroller.scrollTop = a;
        }
        function q(a) {
            w.loading !== a && (w.loading = a), w.hidden = h();
        }
        function r(b) {
            function d(a) {
                (b || "") === (w.searchText || "") && u(a);
            }
            var e = a.$parent.$eval(w.remoteMethod), f = angular.isArray(e), g = !!e && !!e.then;
            f ? d(e) : g && function(a) {
                a && (a = c.when(a), q(!0), a.then(d));
            }(e);
        }
        function s() {
            r(w.searchText || ""), w.hidden = h();
        }
        function t(a) {
            for (var b = [], c = {}, d = 0; d < a.length; d++) c[a[d][w.displayProperty1]] || (c[a[d][w.displayProperty1]] = !0, 
            b.push(a[d]));
            return b;
        }
        function u(a) {
            w.uniqueDisplayProperty && (a = t(a)), w.itemList = a, w.hidden = h(), w.loading && q(!1);
        }
        function v(a) {
            var b = [];
            return a.forEach(function(a) {
                b.push({
                    index: a
                });
            }), b;
        }
        var w = this, x = {
            COMMA: 188,
            SEMICOLON: 186,
            ENTER: 13,
            ESCAPE: 27,
            SPACE: 32,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            END: 35,
            HOME: 36,
            LEFT_ARROW: 37,
            UP_ARROW: 38,
            RIGHT_ARROW: 39,
            DOWN_ARROW: 40,
            TAB: 9,
            BACKSPACE: 8,
            DELETE: 46
        }, y = !1, z = !1;
        w.clearButton = !1, w.loading = !1, w.index = -1, w.isDisabled = null, w.isRequired = null, 
        w.hasNotFound = !1, w.hidden = !0, w.searchText || (w.searchText = ""), w.init = function() {
            g(), w.element = {
                input: b.find("input")[0],
                scroller: b.find("ul")[0],
                scrollContainer: b[0].querySelector("#acDropdown"),
                label: b.find("label")[0]
            }, w.element.li = w.element.scroller.getElementsByTagName("li"), w.element.$ = n(w.element), 
            w.setInputName(), w.itemList && "string" == typeof w.itemList[0] && (w.itemList = v(w.itemList)), 
            w.remoteMethod && (w.itemList = []), w.selectedItem && w.displayProperty && (w.searchText = w.selectedItem[w.displayProperty]);
        }, w.setPlaceHolder = function() {
            w.element.input.setAttribute("placeholder", w.placeHolder || "");
        }, w.removePlaceHolder = function() {
            try {
                (w.showInputName || void 0 === w.showInputName) && w.element.input.removeAttribute("placeholder"), 
                w.element.input.value && "" !== w.element.input.value || w.element.label.classList.remove("active");
            } catch (a) {}
        }, w.setInputName = function() {
            !1 === w.showInputName && w.setPlaceHolder();
        }, w.clearValue = d, w.focus = function(a) {
            w.isInputFocus = !0, w.isInputBlur = !1, angular.isFunction(w.onFocusCb) && w.onFocusCb(), 
            w.setPlaceHolder(), z = !0, i() && w.remoteMethod && s(), w.hidden = h();
        }, w.blur = function(a) {
            w.isInputFocus = !1, w.isInputBlur = !0, angular.isFunction(w.onBlurCb) && w.onBlurCb(), 
            w.removePlaceHolder(), z = !1, y || (w.hidden = h());
        }, w.selectItem = function(a) {
            w.searchText = a[w.displayProperty1], w.selectedItem = a, w.hidden = h();
        }, w.onListEnter = function() {
            y = !0;
        }, w.onListLeave = function() {
            z || w.hidden || w.element.input.focus(), y = !1, w.hidden = h();
        }, w.onMouseup = function() {
            w.element.input.focus();
        }, w.keydown = function(a) {
            switch (a.keyCode) {
              case x.DOWN_ARROW:
                if (w.loading) return;
                a.stopPropagation(), a.preventDefault(), w.index = Math.min(w.index + 1, w.itemList.length - 1), 
                o();
                break;

              case x.UP_ARROW:
                if (w.loading) return;
                a.stopPropagation(), a.preventDefault(), w.index = w.index < 0 ? w.itemList.length - 1 : Math.max(0, w.index - 1), 
                o();
                break;

              case x.ENTER:
                if (w.hidden || w.loading || w.index < 0 || w.itemList.length < 1) return;
                if (j()) return;
                a.stopPropagation(), a.preventDefault(), w.selectedItem = w.itemList[w.index], q(!1);
            }
        }, w.errorTextStyle = function(a) {
            return {
                color: a
            };
        }, w.errorInputStyle = function(a) {
            return {
                "border-bottom-color": a
            };
        }, w.successInputStyle = function(a) {
            return {
                "border-bottom-color": a
            };
        }, w.checkSuccess = function() {
            return w.isInputFocus && w.selectedItem;
        }, w.checkError = function() {
            return w.required && w.isInputBlur && !w.selectedItem;
        };
    };
    angular.module("material.autocomplete").controller("materialAutocompleteCntrl", [ "$scope", "$element", "$q", a ]);
}();
//# sourceMappingURL=materializecss-autocomplete.min.js.map