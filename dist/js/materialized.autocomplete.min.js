/* materialized.autocomplete - v1.0.2 - 2017-05-08 */
!function() {
    "use strict";
    angular.module("material.autocomplete", []);
}(), function() {
    "use strict";
    var a = function() {
        var a = document.querySelector("script[src$='materialized.autocomplete.js']"), b = a.src, c = b.substring(0, b.lastIndexOf("/", b.lastIndexOf("/") - 1)), d = c + "/views/list2.html";
        return {
            restrict: "E",
            scope: {},
            bindToController: {
                id: "@acId",
                inputName: "@acInputName",
                showInputName: "=?acShowInputName",
                placeHolder: "=?acPlaceHolder",
                selectedItem: "=acSelectedItem",
                searchText: "=?acSearchText",
                displayProperty1: "@acDisplayProperty1",
                displayProperty2: "@acDisplayProperty2",
                displayProperty3: "@acDisplayProperty3",
                displayColor: "@acDisplayColor",
                displayPicture: "@acDisplayPicture",
                isMultiValued: "=acIsMultiValued",
                uniqueDisplayProperty: "=?acUniqueDisplayProperty",
                itemList: "=?acItems",
                remoteMethod: "@?acRemoteMethod",
                itemChange: "&?acSelectedItemChange",
                disableInput: "=?acDisableInput",
                onBlurCb: "&?acOnBlurCb",
                onFocusCb: "&?acOnFocusCb"
            },
            replace: !0,
            controller: "materialAutocompleteCntrl",
            controllerAs: "ac",
            templateUrl: d
        };
    };
    angular.module("material.autocomplete").directive("materialAutocomplete", [ a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c) {
        function d() {
            a.$watch(angular.bind(t, function() {
                return t.searchText;
            }), h), a.$watch(angular.bind(t, function() {
                return t.selectedItem;
            }), i);
        }
        function e() {
            return !f();
        }
        function f() {
            return !t.loading && (!g() && !!w);
        }
        function g() {
            return !!t.selectedItem;
        }
        function h(a, b) {
            t.index = -1, a !== b && (t.selectedItem && t.displayProperty ? (n(!1), t.selectedItem[t.displayProperty] !== a && (t.selectedItem = null, 
            t.hidden = e())) : t.remoteMethod && o(a));
        }
        function i(a, b) {
            a ? t.displayProperty && (t.searchText = a[t.displayProperty]) : b && t.searchText && b[t.displayProperty] === t.searchText && (t.searchText = ""), 
            a !== b && j();
        }
        function j() {
            angular.isFunction(t.itemChange) && t.itemChange(t.selectedItem);
        }
        function k(a) {
            var b = {};
            for (var c in a) a.hasOwnProperty(c) && (b[c] = angular.element(a[c]));
            return b;
        }
        function l() {
            if (t.element.li[0]) {
                var a = t.element.li[0].offsetHeight, b = a * t.index, c = b + a, d = t.element.scroller.clientHeight, e = t.element.scroller.scrollTop;
                b < e ? m(b) : c > e + d && m(c - d);
            }
        }
        function m(a) {
            t.element.scroller.scrollTop = a;
        }
        function n(a) {
            t.loading !== a && (t.loading = a), t.hidden = e();
        }
        function o(b) {
            function d(a) {
                (b || "") === (t.searchText || "") && r(a);
            }
            var e = a.$parent.$eval(t.remoteMethod), f = angular.isArray(e), g = !!e && !!e.then;
            f ? d(e) : g && function(a) {
                a && (a = c.when(a), n(!0), a.then(d));
            }(e);
        }
        function p() {
            o(t.searchText || ""), t.hidden = e();
        }
        function q(a) {
            for (var b = [], c = {}, d = 0; d < a.length; d++) c[a[d][t.displayProperty]] || (c[a[d][t.displayProperty]] = !0, 
            b.push(a[d]));
            return b;
        }
        function r(a) {
            t.uniqueDisplayProperty && (a = q(a)), t.itemList = a, t.hidden = e(), t.loading && n(!1);
        }
        function s(a) {
            var b = [];
            return a.forEach(function(a) {
                b.push({
                    index: a
                });
            }), b;
        }
        var t = this, u = {
            COMMA: 188,
            SEMICOLON: 186,
            ENTER: 13,
            ESCAPE: 27,
            SPACE: 32,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            END: 35,
            HOME: 36,
            LEFT_ARROW: 37,
            UP_ARROW: 38,
            RIGHT_ARROW: 39,
            DOWN_ARROW: 40,
            TAB: 9,
            BACKSPACE: 8,
            DELETE: 46
        }, v = !1, w = !1;
        t.clearButton = !1, t.loading = !1, t.index = -1, t.isDisabled = null, t.isRequired = null, 
        t.hasNotFound = !1, t.hidden = !0, t.searchText || (t.searchText = ""), t.init = function() {
            d(), t.element = {
                input: b.find("input")[0],
                scroller: b.find("ul")[0],
                scrollContainer: b[0].querySelector("#acDropdown"),
                label: b.find("label")[0]
            }, t.element.li = t.element.scroller.getElementsByTagName("li"), t.element.$ = k(t.element), 
            t.setInputName(), t.itemList && "string" == typeof t.itemList[0] && (t.itemList = s(t.itemList)), 
            t.remoteMethod && (t.itemList = []), t.selectedItem && t.displayProperty && (t.searchText = t.selectedItem[t.displayProperty]);
        }, t.setPlaceHolder = function() {
            t.element.input.setAttribute("placeholder", t.placeHolder || "");
        }, t.removePlaceHolder = function() {
            try {
                (t.showInputName || void 0 === t.showInputName) && t.element.input.removeAttribute("placeholder"), 
                t.element.input.value && "" !== t.element.input.value || t.element.label.classList.remove("active");
            } catch (a) {}
        }, t.setInputName = function() {
            !1 === t.showInputName && t.setPlaceHolder();
        }, t.focus = function(a) {
            angular.isFunction(t.onFocusCb) && t.onFocusCb(), t.setPlaceHolder(), w = !0, f() && t.remoteMethod && p(), 
            t.hidden = e();
        }, t.blur = function(a) {
            angular.isFunction(t.onBlurCb) && t.onBlurCb(), t.removePlaceHolder(), w = !1, v || (t.hidden = e());
        }, t.selectItem = function(a) {
            t.searchText = a[t.displayProperty], t.selectedItem = a, t.hidden = e();
        }, t.onListEnter = function() {
            v = !0;
        }, t.onListLeave = function() {
            w || t.hidden || t.element.input.focus(), v = !1, t.hidden = e();
        }, t.onMouseup = function() {
            t.element.input.focus();
        }, t.keydown = function(a) {
            switch (a.keyCode) {
              case u.DOWN_ARROW:
                if (t.loading) return;
                a.stopPropagation(), a.preventDefault(), t.index = Math.min(t.index + 1, t.itemList.length - 1), 
                l();
                break;

              case u.UP_ARROW:
                if (t.loading) return;
                a.stopPropagation(), a.preventDefault(), t.index = t.index < 0 ? t.itemList.length - 1 : Math.max(0, t.index - 1), 
                l();
                break;

              case u.ENTER:
                if (t.hidden || t.loading || t.index < 0 || t.itemList.length < 1) return;
                if (g()) return;
                a.stopPropagation(), a.preventDefault(), t.selectedItem = t.itemList[t.index], n(!1);
            }
        };
    };
    angular.module("material.autocomplete").controller("materialAutocompleteCntrl", [ "$scope", "$element", "$q", a ]);
}();
//# sourceMappingURL=materialized.autocomplete.min.js.map